[bumpversion]
current_version = 1.4.1

# `parse` allows parsing the version into the parts we need to check.  There are some
# unnamed groups and that's okay because they do not need to be audited.  If any part
# of the version passed and does not match the regex, it will fail.
# expected matches: `1.5.0`, `1.5.0a1`, `1.5.0a1.dev123457+nightly`
# excepted failures: `1`, `1.5`, `1.5.2-a1`, `text1.5.0`
parse = (?P<major>[\d]+) # major version number
	\.(?P<minor>[\d]+) # minor version number
	\.(?P<patch>[\d]+) # patch version number
	(((?P<prekind>a|b|rc) # optional pre-release type
	?(?P<num>[\d]+?)) # optional pre-release version number
	\.?(?P<nightly>[a-z0-9]+\+[a-z]+)? # optional nightly release indicator
	)?
serialize =
	{major}.{minor}.{patch}{prekind}{num}.{nightly}
	{major}.{minor}.{patch}{prekind}{num}
	{major}.{minor}.{patch}
commit = False
tag = False

[bumpversion:part:prekind]
first_value = a
optional_value = final
values =
	a
	b
	rc
	final

[bumpversion:part:num]
first_value = 1

[bumpversion:part:nightly]

[bumpversion:file:setup.py]

[bumpversion:file:dbt/adapters/spark/__version__.py]
